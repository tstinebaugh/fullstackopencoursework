Sequence diagram for https://studies.cs.helsinki.fi/exampleapp/notes where user submits a note:

browser->server: HTTP POST https://studies.cs.helsinki.fi/exampleapp/new_note
server->browser: 302 redirect
browser->server: HTTP GET https://studies.cs.helsinki.fi/exampleapp/notes
...

Payload of POST https://studies.cs.helsinki.fi/exampleapp/new_note: {"note":"hi"}


------- SPA APP ---------  https://studies.cs.helsinki.fi/exampleapp/spa

browser->server: HTTP GET https://studies.cs.helsinki.fi/exampleapp/spa
server-->browser: HTML-code
browser->server: HTTP GET https://studies.cs.helsinki.fi/exampleapp/spa.html
server-->browser: spa.html
browser->server: HTTP GET https://studies.cs.helsinki.fi/exampleapp/main.css
server-->browser: main.css
browser->server: HTTP GET https://studies.cs.helsinki.fi/exampleapp/spa.js
server-->browser: main.js

note over browser:
browser starts executing js-code
that requests JSON data from server 
end note

browser->server: HTTP GET https://studies.cs.helsinki.fi/exampleapp/data.json
server-->browser: [{ content: "HTML is easy", date: "2019-05-23" }, ...]

POSTING A NOTE:
browser->server: HTTP POST https://studies.cs.helsinki.fi/exampleapp/new_note_spa
payload: {
    "content": "hello from spa land",
    "date": "2022-09-19T01:35:49.799Z"
}
server->browser: 201 
response: {
    "message": "note created"
}

After calling this function, spa.js calls HTTP GET to https://studies.cs.helsinki.fi/exampleapp/data.json to pull refreshed data